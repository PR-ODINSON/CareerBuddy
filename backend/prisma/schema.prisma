// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User entity with role-based access
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(STUDENT)
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  avatar      String?
  phone       String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Student-specific fields
  studentProfile StudentProfile?

  // Counselor-specific fields
  counselorProfile CounselorProfile?

  // Relations
  resumes      Resume[]
  applications Application[]
  sessions     CounselingSession[] @relation("SessionStudent")
  counselingSessions CounselingSession[] @relation("SessionCounselor")
  createdJobs  Job[]               @relation("JobCreator")
  analytics    UserAnalytics[]

  @@map("users")
}

model StudentProfile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  university   String?
  major        String?
  graduationYear Int?
  gpa          Float?
  linkedinUrl  String?
  githubUrl    String?
  portfolioUrl String?
  
  // Career preferences
  targetRoles    String[]
  preferredIndustries String[]
  locationPreferences String[]
  salaryExpectation   Int?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("student_profiles")
}

model CounselorProfile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialization String[]
  experience     Int // years of experience
  certification  String?
  rating         Float   @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("counselor_profiles")
}

// Resume management
model Resume {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  
  // Parsed content
  content     Json?    // Raw parsed content from AI
  skills      String[] // Extracted skills
  experience  Json?    // Work experience data
  education   Json?    // Education data
  
  isActive    Boolean  @default(true)
  version     Int      @default(1)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  versions    ResumeVersion[]
  feedback    ResumeFeedback[]
  applications Application[]

  @@map("resumes")
}

model ResumeVersion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeId   String   @db.ObjectId
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  version    Int
  title      String
  content    Json
  changes    String?  // Description of changes made
  
  createdAt  DateTime @default(now())

  @@unique([resumeId, version])
  @@map("resume_versions")
}

model ResumeFeedback {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String       @db.ObjectId
  resume      Resume       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  type        FeedbackType
  category    String       // e.g., "formatting", "content", "skills"
  title       String
  description String
  severity    FeedbackSeverity
  suggestion  String?
  
  // AI-generated or counselor feedback
  isAiGenerated Boolean    @default(true)
  counselorId   String?    @db.ObjectId
  
  // Position in resume (for specific feedback)
  lineNumber    Int?
  section       String?
  
  isResolved    Boolean    @default(false)
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("resume_feedback")
}

// Job management
model Job {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  company       String
  description   String
  requirements  String[]
  location      String
  locationType  LocationType
  salaryMin     Int?
  salaryMax     Int?
  experienceLevel ExperienceLevel
  
  // Job details
  skills        String[]
  benefits      String[]
  department    String?
  employmentType EmploymentType
  
  // Posting information
  isActive      Boolean    @default(true)
  externalUrl   String?
  source        String?    // e.g., "company_website", "job_board"
  
  // Relations
  createdBy     String     @db.ObjectId
  creator       User       @relation("JobCreator", fields: [createdBy], references: [id])
  applications  Application[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  expiresAt     DateTime?

  @@map("jobs")
}

// Application tracking
model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId       String            @db.ObjectId
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resumeId    String?           @db.ObjectId
  resume      Resume?           @relation(fields: [resumeId], references: [id])
  
  status      ApplicationStatus @default(APPLIED)
  coverLetter String?
  notes       String?
  
  // Timeline tracking
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Interview tracking
  interviews  Interview[]

  @@unique([userId, jobId])
  @@map("applications")
}

model Interview {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  applicationId String        @db.ObjectId
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  type          InterviewType
  scheduledAt   DateTime
  duration      Int?          // minutes
  location      String?
  interviewerName String?
  interviewerEmail String?
  
  status        InterviewStatus @default(SCHEDULED)
  notes         String?
  feedback      String?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("interviews")
}

// Skills management
model Skill {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  category    SkillCategory
  description String?
  
  // Skill metadata
  isVerified  Boolean     @default(false)
  popularity  Int         @default(0)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("skills")
}

// Counseling sessions
model CounselingSession {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String           @db.ObjectId
  student     User             @relation("SessionStudent", fields: [studentId], references: [id])
  counselorId String           @db.ObjectId
  counselor   User             @relation("SessionCounselor", fields: [counselorId], references: [id])
  
  title       String
  description String?
  type        SessionType
  status      SessionStatus    @default(SCHEDULED)
  
  scheduledAt DateTime
  duration    Int              // minutes
  notes       String?
  feedback    String?
  rating      Int?             // 1-5 rating from student
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("counseling_sessions")
}

// Analytics and reporting
model UserAnalytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Activity tracking
  action    String   // e.g., "resume_upload", "job_apply", "session_book"
  metadata  Json?    // Additional data about the action
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())

  @@map("user_analytics")
}

// Enums
enum UserRole {
  STUDENT
  COUNSELOR
  ADMIN
}

enum FeedbackType {
  SUGGESTION
  ERROR
  WARNING
  INFO
}

enum FeedbackSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LocationType {
  REMOTE
  ONSITE
  HYBRID
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  PHONE_SCREEN
  INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  PHONE
  VIDEO
  ONSITE
  TECHNICAL
  BEHAVIORAL
  FINAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum SkillCategory {
  TECHNICAL
  SOFT
  LANGUAGE
  CERTIFICATION
  TOOL
}

enum SessionType {
  RESUME_REVIEW
  CAREER_PLANNING
  INTERVIEW_PREP
  JOB_SEARCH
  GENERAL
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
